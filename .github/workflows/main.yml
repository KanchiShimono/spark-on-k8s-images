name: Build

on:
  push:
    branches:
      - "**"
    tags:
      - "v*.*.*"
  pull_request:

env:
  PYTHON_VERSION: 3.8.5
  SPARK_VERSION: 3.0.0
  HADOOP_VERSION: 3.2
  HADOOP_AWS_JAR_VERSION: 3.2.0
  AWS_JAVA_SDK_VERSION: 1.11.375
  # set over 1000, if you want to create spark user as normal user (not system)
  SPARK_UID: 1850
  IMAGE_OWNER: ${{ secrets.DOCKERHUB_USER }}
  SPARK_IMAGE_NAME: spark
  PYSPARK_IMAGE_NAME: pyspark
  JUPYTER_IMAGE_NAME: pyspark-jupyter
  SPARK_GPU_IMAGE_NAME: spark-gpu
  PYSPARK_GPU_IMAGE_NAME: pyspark-gpu
  JUPYTER_GPU_IMAGE_NAME: pyspark-jupyter-gpu

jobs:
  build:
    name: Build and Push Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Set metadata
        id: meta
        run: |
          VERSION=noop

          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi

          TAGS=${VERSION}

          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            MINOR=${VERSION%.*}
            MAJOR=${MINOR%.*}
            TAGS="${TAGS},${MINOR},${MAJOR},latest"
          fi

          TAG_ARRAY=(${TAGS//,/ })
          for image in ${SPARK_IMAGE_NAME} ${PYSPARK_IMAGE_NAME} ${JUPYTER_IMAGE_NAME} ${SPARK_GPU_IMAGE_NAME} ${PYSPARK_GPU_IMAGE_NAME} ${JUPYTER_GPU_IMAGE_NAME}; do
            IMAGE_TAGS=""

            for tag in "${TAG_ARRAY[@]}"; do
              if [ -z $IMAGE_TAGS ]; then
                IMAGE_TAGS="${IMAGE_OWNER}/${image}:${tag}"
              else
                IMAGE_TAGS="${IMAGE_TAGS},${IMAGE_OWNER}/${image}:${tag}"
              fi
            done

            echo ::set-output name="${image//-/_}_tags"::${IMAGE_TAGS}
          done

          echo ::set-output name=VERSION::${VERSION}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Download Spark
        working-directory: ./base-spark
        run: |
          wget https://archive.apache.org/dist/spark/spark-${SPARK_VERSION}/spark-${SPARK_VERSION}-bin-hadoop${HADOOP_VERSION}.tgz
          tar xzf spark-${SPARK_VERSION}-bin-hadoop${HADOOP_VERSION}.tgz
          mv spark-${SPARK_VERSION}-bin-hadoop${HADOOP_VERSION} origin-spark

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          driver: docker
          install: true

      - name: Build Ubuntu based Spark and PySpark image by official tool
        working-directory: ./base-spark
        run: >
          origin-spark/bin/docker-image-tool.sh
          -r spark
          -t ${{ steps.meta.outputs.VERSION }}
          -f Dockerfile
          -p bindings/python/Dockerfile
          -u ${SPARK_UID}
          build

      - name: Build custom Spark Docker image for Spark on k8s
        uses: docker/build-push-action@v2
        with:
          context: ./spark
          file: ./spark/Dockerfile
          build-args: |
            base=spark/spark:${{ steps.meta.outputs.VERSION }}
            spark_uid=${{ env.SPARK_UID }}
            HADOOP_AWS_JAR_VERSION=${{ env.HADOOP_AWS_JAR_VERSION }}
            AWS_JAVA_SDK_VERSION=${{ env.AWS_JAVA_SDK_VERSION }}
          load: true
          tags: ${{ steps.meta.outputs.spark_tags }}
          labels: |
            org.opencontainers.image.title=${{ env.SPARK_IMAGE_NAME }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.meta.outputs.VERSION }}
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build PySpark Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./pyspark
          file: ./pyspark/Dockerfile
          build-args: |
            base=${{ env.IMAGE_OWNER }}/${{ env.SPARK_IMAGE_NAME }}:${{ steps.meta.outputs.VERSION }}
            base_pyspark=spark/spark-py:${{ steps.meta.outputs.VERSION }}
            spark_uid=${{ env.SPARK_UID }}
            python_version=${{ env.PYTHON_VERSION }}
          load: true
          tags: ${{ steps.meta.outputs.pyspark_tags }}
          labels: |
            org.opencontainers.image.title=${{ env.PYSPARK_IMAGE_NAME }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.meta.outputs.VERSION }}
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build PySpark with Jupyter server Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./pyspark-jupyter
          file: ./pyspark-jupyter/Dockerfile
          build-args: |
            base=${{ env.IMAGE_OWNER }}/${{ env.PYSPARK_IMAGE_NAME }}:${{ steps.meta.outputs.VERSION }}
            spark_uid=${{ env.SPARK_UID }}
          load: true
          tags: ${{ steps.meta.outputs.pyspark_jupyter_tags }}
          labels: |
            org.opencontainers.image.title=${{ env.JUPYTER_IMAGE_NAME }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.meta.outputs.VERSION }}
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build Spark GPU Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./spark-gpu
          file: ./spark-gpu/Dockerfile
          build-args: |
            base=${{ env.IMAGE_OWNER }}/${{ env.SPARK_IMAGE_NAME }}:${{ steps.meta.outputs.VERSION }}
            spark_uid=${{ env.SPARK_UID }}
          load: true
          tags: ${{ steps.meta.outputs.spark_gpu_tags }}
          labels: |
            org.opencontainers.image.title=${{ env.SPARK_GPU_IMAGE_NAME }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.meta.outputs.VERSION }}
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build PySpark GPU Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./pyspark
          file: ./pyspark/Dockerfile
          build-args: |
            base=${{ env.IMAGE_OWNER }}/${{ env.SPARK_GPU_IMAGE_NAME }}:${{ steps.meta.outputs.VERSION }}
            base_pyspark=spark/spark-py:${{ steps.meta.outputs.VERSION }}
            spark_uid=${{ env.SPARK_UID }}
            python_version=${{ env.PYTHON_VERSION }}
          load: true
          tags: ${{ steps.meta.outputs.pyspark_gpu_tags }}
          labels: |
            org.opencontainers.image.title=${{ env.PYSPARK_GPU_IMAGE_NAME }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.meta.outputs.VERSION }}
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build PySpark GPU with Jupyter server Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./pyspark-jupyter
          file: ./pyspark-jupyter/Dockerfile
          build-args: |
            base=${{ env.IMAGE_OWNER }}/${{ env.PYSPARK_GPU_IMAGE_NAME }}:${{ steps.meta.outputs.VERSION }}
            spark_uid=${{ env.SPARK_UID }}
          load: true
          tags: ${{ steps.meta.outputs.pyspark_jupyter_gpu_tags }}
          labels: |
            org.opencontainers.image.title=${{ env.JUPYTER_GPU_IMAGE_NAME }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.version=${{ steps.meta.outputs.VERSION }}
            org.opencontainers.image.created=${{ steps.meta.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push to DockerHub
        if: ${{ github.event_name != 'pull_request' }}
        env:
          SPARK_TAGS: ${{ steps.meta.outputs.spark_tags }}
          PYSPARK_TAGS: ${{ steps.meta.outputs.pyspark_tags }}
          JUPYTER_TAGS: ${{ steps.meta.outputs.pyspark_jupyter_tags }}
          SPARK_GPU_TAGS: ${{ steps.meta.outputs.spark_gpu_tags }}
          PYSPARK_GPU_TAGS: ${{ steps.meta.outputs.pyspark_gpu_tags }}
          JUPYTER_GPU_TAGS: ${{ steps.meta.outputs.pyspark_jupyter_gpu_tags }}
        run: |
          for tag in ${SPARK_TAGS//,/ } ${PYSPARK_TAGS//,/ } ${JUPYTER_TAGS//,/ } ${SPARK_GPU_TAGS//,/ } ${PYSPARK_GPU_TAGS//,/ } ${JUPYTER_GPU_TAGS//,/ }; do
            docker push $tag
          done
